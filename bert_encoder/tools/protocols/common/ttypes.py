#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class SceneInfo(object):
    """
    Attributes:
     - page_id
     - query_id
     - req_query_id
     - rank
    """


    def __init__(self, page_id=None, query_id=None, req_query_id=None, rank=None,):
        self.page_id = page_id
        self.query_id = query_id
        self.req_query_id = req_query_id
        self.rank = rank

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.page_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.query_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.req_query_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SceneInfo')
        if self.page_id is not None:
            oprot.writeFieldBegin('page_id', TType.STRING, 1)
            oprot.writeString(self.page_id.encode('utf-8') if sys.version_info[0] == 2 else self.page_id)
            oprot.writeFieldEnd()
        if self.query_id is not None:
            oprot.writeFieldBegin('query_id', TType.STRING, 2)
            oprot.writeString(self.query_id.encode('utf-8') if sys.version_info[0] == 2 else self.query_id)
            oprot.writeFieldEnd()
        if self.req_query_id is not None:
            oprot.writeFieldBegin('req_query_id', TType.STRING, 3)
            oprot.writeString(self.req_query_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_query_id)
            oprot.writeFieldEnd()
        if self.rank is not None:
            oprot.writeFieldBegin('rank', TType.I32, 4)
            oprot.writeI32(self.rank)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VoicePrint(object):
    """
    Attributes:
     - sex
     - age
    """


    def __init__(self, sex=None, age=None,):
        self.sex = sex
        self.age = age

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.age = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VoicePrint')
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.STRING, 1)
            oprot.writeString(self.sex.encode('utf-8') if sys.version_info[0] == 2 else self.sex)
            oprot.writeFieldEnd()
        if self.age is not None:
            oprot.writeFieldBegin('age', TType.STRING, 2)
            oprot.writeString(self.age.encode('utf-8') if sys.version_info[0] == 2 else self.age)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserInfo(object):
    """
    Attributes:
     - user_id
     - app_id
     - device_id
     - user_ip
     - city_id
     - latitude
     - longitude
     - app_ver
     - account_id
     - mor_account_id
     - mor_device_id
     - push_user
     - voice_print
     - mobile
     - query_id
     - key
    """


    def __init__(self, user_id=None, app_id=None, device_id=None, user_ip=None, city_id=None, latitude=None, longitude=None, app_ver=None, account_id=None, mor_account_id=None, mor_device_id=None, push_user=None, voice_print=None, mobile=None, query_id=None, key=None,):
        self.user_id = user_id
        self.app_id = app_id
        self.device_id = device_id
        self.user_ip = user_ip
        self.city_id = city_id
        self.latitude = latitude
        self.longitude = longitude
        self.app_ver = app_ver
        self.account_id = account_id
        self.mor_account_id = mor_account_id
        self.mor_device_id = mor_device_id
        self.push_user = push_user
        self.voice_print = voice_print
        self.mobile = mobile
        self.query_id = query_id
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.app_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.device_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.user_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.city_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.app_ver = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.account_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.mor_account_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.mor_device_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.push_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.voice_print = VoicePrint()
                    self.voice_print.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.query_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserInfo')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.STRING, 1)
            oprot.writeString(self.user_id.encode('utf-8') if sys.version_info[0] == 2 else self.user_id)
            oprot.writeFieldEnd()
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.I64, 2)
            oprot.writeI64(self.app_id)
            oprot.writeFieldEnd()
        if self.device_id is not None:
            oprot.writeFieldBegin('device_id', TType.STRING, 3)
            oprot.writeString(self.device_id.encode('utf-8') if sys.version_info[0] == 2 else self.device_id)
            oprot.writeFieldEnd()
        if self.user_ip is not None:
            oprot.writeFieldBegin('user_ip', TType.STRING, 4)
            oprot.writeString(self.user_ip.encode('utf-8') if sys.version_info[0] == 2 else self.user_ip)
            oprot.writeFieldEnd()
        if self.city_id is not None:
            oprot.writeFieldBegin('city_id', TType.I32, 5)
            oprot.writeI32(self.city_id)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 6)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 7)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.app_ver is not None:
            oprot.writeFieldBegin('app_ver', TType.STRING, 8)
            oprot.writeString(self.app_ver.encode('utf-8') if sys.version_info[0] == 2 else self.app_ver)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.STRING, 9)
            oprot.writeString(self.account_id.encode('utf-8') if sys.version_info[0] == 2 else self.account_id)
            oprot.writeFieldEnd()
        if self.mor_account_id is not None:
            oprot.writeFieldBegin('mor_account_id', TType.STRING, 10)
            oprot.writeString(self.mor_account_id.encode('utf-8') if sys.version_info[0] == 2 else self.mor_account_id)
            oprot.writeFieldEnd()
        if self.mor_device_id is not None:
            oprot.writeFieldBegin('mor_device_id', TType.STRING, 11)
            oprot.writeString(self.mor_device_id.encode('utf-8') if sys.version_info[0] == 2 else self.mor_device_id)
            oprot.writeFieldEnd()
        if self.push_user is not None:
            oprot.writeFieldBegin('push_user', TType.STRING, 12)
            oprot.writeString(self.push_user.encode('utf-8') if sys.version_info[0] == 2 else self.push_user)
            oprot.writeFieldEnd()
        if self.voice_print is not None:
            oprot.writeFieldBegin('voice_print', TType.STRUCT, 13)
            self.voice_print.write(oprot)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 14)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.query_id is not None:
            oprot.writeFieldBegin('query_id', TType.STRING, 15)
            oprot.writeString(self.query_id.encode('utf-8') if sys.version_info[0] == 2 else self.query_id)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 16)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SAToken(object):
    """
    Attributes:
     - term
     - pos
     - ner_tag
     - arc_head
     - arc_rel
    """


    def __init__(self, term=None, pos=None, ner_tag=None, arc_head=None, arc_rel=None,):
        self.term = term
        self.pos = pos
        self.ner_tag = ner_tag
        self.arc_head = arc_head
        self.arc_rel = arc_rel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.term = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pos = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ner_tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.arc_head = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.arc_rel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SAToken')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.STRING, 1)
            oprot.writeString(self.term.encode('utf-8') if sys.version_info[0] == 2 else self.term)
            oprot.writeFieldEnd()
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.STRING, 2)
            oprot.writeString(self.pos.encode('utf-8') if sys.version_info[0] == 2 else self.pos)
            oprot.writeFieldEnd()
        if self.ner_tag is not None:
            oprot.writeFieldBegin('ner_tag', TType.STRING, 3)
            oprot.writeString(self.ner_tag.encode('utf-8') if sys.version_info[0] == 2 else self.ner_tag)
            oprot.writeFieldEnd()
        if self.arc_head is not None:
            oprot.writeFieldBegin('arc_head', TType.I32, 4)
            oprot.writeI32(self.arc_head)
            oprot.writeFieldEnd()
        if self.arc_rel is not None:
            oprot.writeFieldBegin('arc_rel', TType.STRING, 5)
            oprot.writeString(self.arc_rel.encode('utf-8') if sys.version_info[0] == 2 else self.arc_rel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Token(object):
    """
    Attributes:
     - term
     - pos
     - pos_id
     - weight
    """


    def __init__(self, term=None, pos=None, pos_id=None, weight=None,):
        self.term = term
        self.pos = pos
        self.pos_id = pos_id
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.term = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pos = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pos_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Token')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.STRING, 1)
            oprot.writeString(self.term.encode('utf-8') if sys.version_info[0] == 2 else self.term)
            oprot.writeFieldEnd()
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.STRING, 2)
            oprot.writeString(self.pos.encode('utf-8') if sys.version_info[0] == 2 else self.pos)
            oprot.writeFieldEnd()
        if self.pos_id is not None:
            oprot.writeFieldBegin('pos_id', TType.I32, 3)
            oprot.writeI32(self.pos_id)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tag(object):
    """
    Attributes:
     - tag
     - offset
     - bitmap
     - weight
     - uniform
     - length
    """


    def __init__(self, tag=None, offset=None, bitmap=None, weight=None, uniform=None, length=None,):
        self.tag = tag
        self.offset = offset
        self.bitmap = bitmap
        self.weight = weight
        self.uniform = uniform
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bitmap = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.uniform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tag')
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.I32, 1)
            oprot.writeI32(self.tag)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 2)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.bitmap is not None:
            oprot.writeFieldBegin('bitmap', TType.STRING, 3)
            oprot.writeBinary(self.bitmap)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.uniform is not None:
            oprot.writeFieldBegin('uniform', TType.STRING, 5)
            oprot.writeString(self.uniform.encode('utf-8') if sys.version_info[0] == 2 else self.uniform)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 6)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LexTag(object):
    """
    Attributes:
     - token_off
     - token_len
     - bitset
     - tag
     - ori_text
     - val_text
     - weight
    """


    def __init__(self, token_off=None, token_len=None, bitset=None, tag=None, ori_text=None, val_text=None, weight=None,):
        self.token_off = token_off
        self.token_len = token_len
        self.bitset = bitset
        self.tag = tag
        self.ori_text = ori_text
        self.val_text = val_text
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.token_off = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.token_len = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bitset = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ori_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.val_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LexTag')
        if self.token_off is not None:
            oprot.writeFieldBegin('token_off', TType.I32, 1)
            oprot.writeI32(self.token_off)
            oprot.writeFieldEnd()
        if self.token_len is not None:
            oprot.writeFieldBegin('token_len', TType.I32, 2)
            oprot.writeI32(self.token_len)
            oprot.writeFieldEnd()
        if self.bitset is not None:
            oprot.writeFieldBegin('bitset', TType.STRING, 3)
            oprot.writeBinary(self.bitset)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.ori_text is not None:
            oprot.writeFieldBegin('ori_text', TType.STRING, 5)
            oprot.writeString(self.ori_text.encode('utf-8') if sys.version_info[0] == 2 else self.ori_text)
            oprot.writeFieldEnd()
        if self.val_text is not None:
            oprot.writeFieldBegin('val_text', TType.STRING, 6)
            oprot.writeString(self.val_text.encode('utf-8') if sys.version_info[0] == 2 else self.val_text)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 7)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LAResult(object):
    """
    Attributes:
     - tokens
     - tags
     - lex_tags
    """


    def __init__(self, tokens=None, tags=None, lex_tags=None,):
        self.tokens = tokens
        self.tags = tags
        self.lex_tags = lex_tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.tokens = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Token()
                        _elem5.read(iprot)
                        self.tokens.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Tag()
                        _elem11.read(iprot)
                        self.tags.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.lex_tags = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = LexTag()
                        _elem17.read(iprot)
                        self.lex_tags.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LAResult')
        if self.tokens is not None:
            oprot.writeFieldBegin('tokens', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.tokens))
            for iter18 in self.tokens:
                iter18.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tags))
            for iter19 in self.tags:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lex_tags is not None:
            oprot.writeFieldBegin('lex_tags', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.lex_tags))
            for iter20 in self.lex_tags:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaggingItem(object):
    """
    Attributes:
     - offset
     - length
     - tag
     - ori_text
     - val_text
     - weight
    """


    def __init__(self, offset=None, length=None, tag=None, ori_text=None, val_text=None, weight=None,):
        self.offset = offset
        self.length = length
        self.tag = tag
        self.ori_text = ori_text
        self.val_text = val_text
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ori_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.val_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.weight = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaggingItem')
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 1)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 2)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 3)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.ori_text is not None:
            oprot.writeFieldBegin('ori_text', TType.STRING, 4)
            oprot.writeString(self.ori_text.encode('utf-8') if sys.version_info[0] == 2 else self.ori_text)
            oprot.writeFieldEnd()
        if self.val_text is not None:
            oprot.writeFieldBegin('val_text', TType.STRING, 5)
            oprot.writeString(self.val_text.encode('utf-8') if sys.version_info[0] == 2 else self.val_text)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.I32, 6)
            oprot.writeI32(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaggingResult(object):
    """
    Attributes:
     - tags
     - terms
     - terms_tag
    """


    def __init__(self, tags=None, terms=None, terms_tag=None,):
        self.tags = tags
        self.terms = terms
        self.terms_tag = terms_tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = TaggingItem()
                        _elem26.read(iprot)
                        self.tags.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.terms = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.terms.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.terms_tag = {}
                    (_ktype34, _vtype35, _size33) = iprot.readMapBegin()
                    for _i37 in range(_size33):
                        _key38 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val39 = []
                        (_etype43, _size40) = iprot.readListBegin()
                        for _i44 in range(_size40):
                            _elem45 = TaggingItem()
                            _elem45.read(iprot)
                            _val39.append(_elem45)
                        iprot.readListEnd()
                        self.terms_tag[_key38] = _val39
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaggingResult')
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.tags))
            for iter46 in self.tags:
                iter46.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.terms is not None:
            oprot.writeFieldBegin('terms', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.terms))
            for iter47 in self.terms:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.terms_tag is not None:
            oprot.writeFieldBegin('terms_tag', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.terms_tag))
            for kiter48, viter49 in self.terms_tag.items():
                oprot.writeString(kiter48.encode('utf-8') if sys.version_info[0] == 2 else kiter48)
                oprot.writeListBegin(TType.STRUCT, len(viter49))
                for iter50 in viter49:
                    iter50.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IntentInfo(object):
    """
    Attributes:
     - intent_prob
     - tree_objects
     - detail_intent_prob
    """


    def __init__(self, intent_prob=None, tree_objects=None, detail_intent_prob=None,):
        self.intent_prob = intent_prob
        self.tree_objects = tree_objects
        self.detail_intent_prob = detail_intent_prob

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.intent_prob = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.tree_objects = {}
                    (_ktype52, _vtype53, _size51) = iprot.readMapBegin()
                    for _i55 in range(_size51):
                        _key56 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val57 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tree_objects[_key56] = _val57
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.detail_intent_prob = {}
                    (_ktype59, _vtype60, _size58) = iprot.readMapBegin()
                    for _i62 in range(_size58):
                        _key63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val64 = iprot.readDouble()
                        self.detail_intent_prob[_key63] = _val64
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IntentInfo')
        if self.intent_prob is not None:
            oprot.writeFieldBegin('intent_prob', TType.DOUBLE, 1)
            oprot.writeDouble(self.intent_prob)
            oprot.writeFieldEnd()
        if self.tree_objects is not None:
            oprot.writeFieldBegin('tree_objects', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.tree_objects))
            for kiter65, viter66 in self.tree_objects.items():
                oprot.writeString(kiter65.encode('utf-8') if sys.version_info[0] == 2 else kiter65)
                oprot.writeString(viter66.encode('utf-8') if sys.version_info[0] == 2 else viter66)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.detail_intent_prob is not None:
            oprot.writeFieldBegin('detail_intent_prob', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.detail_intent_prob))
            for kiter67, viter68 in self.detail_intent_prob.items():
                oprot.writeString(kiter67.encode('utf-8') if sys.version_info[0] == 2 else kiter67)
                oprot.writeDouble(viter68)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IAResult(object):
    """
    Attributes:
     - intent2result
     - chitchatProb
    """


    def __init__(self, intent2result=None, chitchatProb=None,):
        self.intent2result = intent2result
        self.chitchatProb = chitchatProb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.intent2result = {}
                    (_ktype70, _vtype71, _size69) = iprot.readMapBegin()
                    for _i73 in range(_size69):
                        _key74 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val75 = IntentInfo()
                        _val75.read(iprot)
                        self.intent2result[_key74] = _val75
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.chitchatProb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IAResult')
        if self.intent2result is not None:
            oprot.writeFieldBegin('intent2result', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.intent2result))
            for kiter76, viter77 in self.intent2result.items():
                oprot.writeString(kiter76.encode('utf-8') if sys.version_info[0] == 2 else kiter76)
                viter77.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.chitchatProb is not None:
            oprot.writeFieldBegin('chitchatProb', TType.DOUBLE, 2)
            oprot.writeDouble(self.chitchatProb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IAResultTest(object):
    """
    Attributes:
     - intent2result_test
    """


    def __init__(self, intent2result_test=None,):
        self.intent2result_test = intent2result_test

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.intent2result_test = {}
                    (_ktype79, _vtype80, _size78) = iprot.readMapBegin()
                    for _i82 in range(_size78):
                        _key83 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val84 = IntentInfo()
                        _val84.read(iprot)
                        self.intent2result_test[_key83] = _val84
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IAResultTest')
        if self.intent2result_test is not None:
            oprot.writeFieldBegin('intent2result_test', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.intent2result_test))
            for kiter85, viter86 in self.intent2result_test.items():
                oprot.writeString(kiter85.encode('utf-8') if sys.version_info[0] == 2 else kiter85)
                viter86.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BaSlot(object):
    """
    Attributes:
     - name
     - value
    """


    def __init__(self, name=None, value=None,):
        self.name = name
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BaSlot')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BaInfo(object):
    """
    Attributes:
     - intent
     - domain_prob
     - domain
     - slots
    """


    def __init__(self, intent=None, domain_prob=None, domain=None, slots=None,):
        self.intent = intent
        self.domain_prob = domain_prob
        self.domain = domain
        self.slots = slots

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.intent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.domain_prob = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.slots = []
                    (_etype90, _size87) = iprot.readListBegin()
                    for _i91 in range(_size87):
                        _elem92 = BaSlot()
                        _elem92.read(iprot)
                        self.slots.append(_elem92)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BaInfo')
        if self.intent is not None:
            oprot.writeFieldBegin('intent', TType.STRING, 1)
            oprot.writeString(self.intent.encode('utf-8') if sys.version_info[0] == 2 else self.intent)
            oprot.writeFieldEnd()
        if self.domain_prob is not None:
            oprot.writeFieldBegin('domain_prob', TType.DOUBLE, 2)
            oprot.writeDouble(self.domain_prob)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 3)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.slots is not None:
            oprot.writeFieldBegin('slots', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.slots))
            for iter93 in self.slots:
                iter93.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BAResult(object):
    """
    Attributes:
     - ba2result
     - resJson
    """


    def __init__(self, ba2result=None, resJson=None,):
        self.ba2result = ba2result
        self.resJson = resJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.ba2result = {}
                    (_ktype95, _vtype96, _size94) = iprot.readMapBegin()
                    for _i98 in range(_size94):
                        _key99 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val100 = BaInfo()
                        _val100.read(iprot)
                        self.ba2result[_key99] = _val100
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.resJson = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BAResult')
        if self.ba2result is not None:
            oprot.writeFieldBegin('ba2result', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.ba2result))
            for kiter101, viter102 in self.ba2result.items():
                oprot.writeString(kiter101.encode('utf-8') if sys.version_info[0] == 2 else kiter101)
                viter102.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.resJson is not None:
            oprot.writeFieldBegin('resJson', TType.STRING, 2)
            oprot.writeString(self.resJson.encode('utf-8') if sys.version_info[0] == 2 else self.resJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Request(object):
    """
    Attributes:
     - query
     - user_info
     - sys_msg
     - domain
     - dialogue
     - la_result
     - write_context
     - key
     - query_id
     - ia_result
     - scene
     - present_data
     - custom_data
     - app_type
     - version
     - req_from
    """


    def __init__(self, query=None, user_info=None, sys_msg=None, domain=None, dialogue=True, la_result=None, write_context=False, key=None, query_id=None, ia_result=None, scene=None, present_data=None, custom_data=None, app_type=None, version=None, req_from=None,):
        self.query = query
        self.user_info = user_info
        self.sys_msg = sys_msg
        self.domain = domain
        self.dialogue = dialogue
        self.la_result = la_result
        self.write_context = write_context
        self.key = key
        self.query_id = query_id
        self.ia_result = ia_result
        self.scene = scene
        self.present_data = present_data
        self.custom_data = custom_data
        self.app_type = app_type
        self.version = version
        self.req_from = req_from

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_info = UserInfo()
                    self.user_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sys_msg = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.dialogue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.la_result = LAResult()
                    self.la_result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.write_context = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.query_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.ia_result = IAResult()
                    self.ia_result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.scene = SceneInfo()
                    self.scene.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.present_data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.custom_data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.app_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.req_from = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Request')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 1)
            oprot.writeString(self.query.encode('utf-8') if sys.version_info[0] == 2 else self.query)
            oprot.writeFieldEnd()
        if self.user_info is not None:
            oprot.writeFieldBegin('user_info', TType.STRUCT, 2)
            self.user_info.write(oprot)
            oprot.writeFieldEnd()
        if self.sys_msg is not None:
            oprot.writeFieldBegin('sys_msg', TType.BOOL, 3)
            oprot.writeBool(self.sys_msg)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 4)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.dialogue is not None:
            oprot.writeFieldBegin('dialogue', TType.BOOL, 5)
            oprot.writeBool(self.dialogue)
            oprot.writeFieldEnd()
        if self.la_result is not None:
            oprot.writeFieldBegin('la_result', TType.STRUCT, 6)
            self.la_result.write(oprot)
            oprot.writeFieldEnd()
        if self.write_context is not None:
            oprot.writeFieldBegin('write_context', TType.BOOL, 7)
            oprot.writeBool(self.write_context)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 8)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.query_id is not None:
            oprot.writeFieldBegin('query_id', TType.STRING, 9)
            oprot.writeString(self.query_id.encode('utf-8') if sys.version_info[0] == 2 else self.query_id)
            oprot.writeFieldEnd()
        if self.ia_result is not None:
            oprot.writeFieldBegin('ia_result', TType.STRUCT, 10)
            self.ia_result.write(oprot)
            oprot.writeFieldEnd()
        if self.scene is not None:
            oprot.writeFieldBegin('scene', TType.STRUCT, 11)
            self.scene.write(oprot)
            oprot.writeFieldEnd()
        if self.present_data is not None:
            oprot.writeFieldBegin('present_data', TType.STRING, 12)
            oprot.writeString(self.present_data.encode('utf-8') if sys.version_info[0] == 2 else self.present_data)
            oprot.writeFieldEnd()
        if self.custom_data is not None:
            oprot.writeFieldBegin('custom_data', TType.STRING, 13)
            oprot.writeString(self.custom_data.encode('utf-8') if sys.version_info[0] == 2 else self.custom_data)
            oprot.writeFieldEnd()
        if self.app_type is not None:
            oprot.writeFieldBegin('app_type', TType.STRING, 14)
            oprot.writeString(self.app_type.encode('utf-8') if sys.version_info[0] == 2 else self.app_type)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 15)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.req_from is not None:
            oprot.writeFieldBegin('req_from', TType.STRING, 16)
            oprot.writeString(self.req_from.encode('utf-8') if sys.version_info[0] == 2 else self.req_from)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - state
     - reply
     - info
     - tts
     - json
     - score
     - service_name
     - global_context
     - corefer_context
     - baike_tag
     - latency
     - cache_tag
    """


    def __init__(self, state=None, reply=None, info=None, tts=None, json=None, score=None, service_name=None, global_context=None, corefer_context=None, baike_tag=False, latency=None, cache_tag=False,):
        self.state = state
        self.reply = reply
        self.info = info
        self.tts = tts
        self.json = json
        self.score = score
        self.service_name = service_name
        self.global_context = global_context
        self.corefer_context = corefer_context
        self.baike_tag = baike_tag
        self.latency = latency
        self.cache_tag = cache_tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reply = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tts = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.json = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.service_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.global_context = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.corefer_context = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.baike_tag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.latency = {}
                    (_ktype104, _vtype105, _size103) = iprot.readMapBegin()
                    for _i107 in range(_size103):
                        _key108 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val109 = iprot.readI32()
                        self.latency[_key108] = _val109
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.cache_tag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.reply is not None:
            oprot.writeFieldBegin('reply', TType.STRING, 2)
            oprot.writeString(self.reply.encode('utf-8') if sys.version_info[0] == 2 else self.reply)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRING, 3)
            oprot.writeString(self.info.encode('utf-8') if sys.version_info[0] == 2 else self.info)
            oprot.writeFieldEnd()
        if self.tts is not None:
            oprot.writeFieldBegin('tts', TType.STRING, 4)
            oprot.writeString(self.tts.encode('utf-8') if sys.version_info[0] == 2 else self.tts)
            oprot.writeFieldEnd()
        if self.json is not None:
            oprot.writeFieldBegin('json', TType.STRING, 5)
            oprot.writeString(self.json.encode('utf-8') if sys.version_info[0] == 2 else self.json)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 6)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        if self.service_name is not None:
            oprot.writeFieldBegin('service_name', TType.STRING, 7)
            oprot.writeString(self.service_name.encode('utf-8') if sys.version_info[0] == 2 else self.service_name)
            oprot.writeFieldEnd()
        if self.global_context is not None:
            oprot.writeFieldBegin('global_context', TType.STRING, 8)
            oprot.writeString(self.global_context.encode('utf-8') if sys.version_info[0] == 2 else self.global_context)
            oprot.writeFieldEnd()
        if self.corefer_context is not None:
            oprot.writeFieldBegin('corefer_context', TType.STRING, 9)
            oprot.writeString(self.corefer_context.encode('utf-8') if sys.version_info[0] == 2 else self.corefer_context)
            oprot.writeFieldEnd()
        if self.baike_tag is not None:
            oprot.writeFieldBegin('baike_tag', TType.BOOL, 10)
            oprot.writeBool(self.baike_tag)
            oprot.writeFieldEnd()
        if self.latency is not None:
            oprot.writeFieldBegin('latency', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.latency))
            for kiter110, viter111 in self.latency.items():
                oprot.writeString(kiter110.encode('utf-8') if sys.version_info[0] == 2 else kiter110)
                oprot.writeI32(viter111)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cache_tag is not None:
            oprot.writeFieldBegin('cache_tag', TType.BOOL, 12)
            oprot.writeBool(self.cache_tag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Exception(TException):
    """
    Attributes:
     - err_num
     - message
    """


    def __init__(self, err_num=None, message=None,):
        self.err_num = err_num
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.err_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Exception')
        if self.err_num is not None:
            oprot.writeFieldBegin('err_num', TType.I32, 1)
            oprot.writeI32(self.err_num)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SceneInfo)
SceneInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'page_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'query_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'req_query_id', 'UTF8', None, ),  # 3
    (4, TType.I32, 'rank', None, None, ),  # 4
)
all_structs.append(VoicePrint)
VoicePrint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sex', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'age', 'UTF8', None, ),  # 2
)
all_structs.append(UserInfo)
UserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'app_id', None, None, ),  # 2
    (3, TType.STRING, 'device_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'user_ip', 'UTF8', None, ),  # 4
    (5, TType.I32, 'city_id', None, None, ),  # 5
    (6, TType.DOUBLE, 'latitude', None, None, ),  # 6
    (7, TType.DOUBLE, 'longitude', None, None, ),  # 7
    (8, TType.STRING, 'app_ver', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'account_id', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'mor_account_id', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'mor_device_id', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'push_user', 'UTF8', None, ),  # 12
    (13, TType.STRUCT, 'voice_print', [VoicePrint, None], None, ),  # 13
    (14, TType.STRING, 'mobile', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'query_id', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'key', 'UTF8', None, ),  # 16
)
all_structs.append(SAToken)
SAToken.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'term', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'pos', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ner_tag', 'UTF8', None, ),  # 3
    (4, TType.I32, 'arc_head', None, None, ),  # 4
    (5, TType.STRING, 'arc_rel', 'UTF8', None, ),  # 5
)
all_structs.append(Token)
Token.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'term', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'pos', 'UTF8', None, ),  # 2
    (3, TType.I32, 'pos_id', None, None, ),  # 3
    (4, TType.DOUBLE, 'weight', None, None, ),  # 4
)
all_structs.append(Tag)
Tag.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tag', None, None, ),  # 1
    (2, TType.I32, 'offset', None, None, ),  # 2
    (3, TType.STRING, 'bitmap', 'BINARY', None, ),  # 3
    (4, TType.DOUBLE, 'weight', None, None, ),  # 4
    (5, TType.STRING, 'uniform', 'UTF8', None, ),  # 5
    (6, TType.I32, 'length', None, None, ),  # 6
)
all_structs.append(LexTag)
LexTag.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'token_off', None, None, ),  # 1
    (2, TType.I32, 'token_len', None, None, ),  # 2
    (3, TType.STRING, 'bitset', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'tag', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ori_text', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'val_text', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'weight', None, None, ),  # 7
)
all_structs.append(LAResult)
LAResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tokens', (TType.STRUCT, [Token, None], False), None, ),  # 1
    (2, TType.LIST, 'tags', (TType.STRUCT, [Tag, None], False), None, ),  # 2
    (3, TType.LIST, 'lex_tags', (TType.STRUCT, [LexTag, None], False), None, ),  # 3
)
all_structs.append(TaggingItem)
TaggingItem.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'offset', None, None, ),  # 1
    (2, TType.I32, 'length', None, None, ),  # 2
    (3, TType.STRING, 'tag', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ori_text', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'val_text', 'UTF8', None, ),  # 5
    (6, TType.I32, 'weight', None, None, ),  # 6
)
all_structs.append(TaggingResult)
TaggingResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tags', (TType.STRUCT, [TaggingItem, None], False), None, ),  # 1
    (2, TType.LIST, 'terms', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'terms_tag', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [TaggingItem, None], False), False), None, ),  # 3
)
all_structs.append(IntentInfo)
IntentInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'intent_prob', None, None, ),  # 1
    (2, TType.MAP, 'tree_objects', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'detail_intent_prob', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 3
)
all_structs.append(IAResult)
IAResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'intent2result', (TType.STRING, 'UTF8', TType.STRUCT, [IntentInfo, None], False), None, ),  # 1
    (2, TType.DOUBLE, 'chitchatProb', None, None, ),  # 2
)
all_structs.append(IAResultTest)
IAResultTest.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'intent2result_test', (TType.STRING, 'UTF8', TType.STRUCT, [IntentInfo, None], False), None, ),  # 1
)
all_structs.append(BaSlot)
BaSlot.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(BaInfo)
BaInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'intent', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'domain_prob', None, None, ),  # 2
    (3, TType.STRING, 'domain', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'slots', (TType.STRUCT, [BaSlot, None], False), None, ),  # 4
)
all_structs.append(BAResult)
BAResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'ba2result', (TType.STRING, 'UTF8', TType.STRUCT, [BaInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'resJson', 'UTF8', None, ),  # 2
)
all_structs.append(Request)
Request.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'query', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'user_info', [UserInfo, None], None, ),  # 2
    (3, TType.BOOL, 'sys_msg', None, None, ),  # 3
    (4, TType.STRING, 'domain', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'dialogue', None, True, ),  # 5
    (6, TType.STRUCT, 'la_result', [LAResult, None], None, ),  # 6
    (7, TType.BOOL, 'write_context', None, False, ),  # 7
    (8, TType.STRING, 'key', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'query_id', 'UTF8', None, ),  # 9
    (10, TType.STRUCT, 'ia_result', [IAResult, None], None, ),  # 10
    (11, TType.STRUCT, 'scene', [SceneInfo, None], None, ),  # 11
    (12, TType.STRING, 'present_data', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'custom_data', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'app_type', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'version', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'req_from', 'UTF8', None, ),  # 16
)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'state', None, None, ),  # 1
    (2, TType.STRING, 'reply', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'info', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tts', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'json', 'UTF8', None, ),  # 5
    (6, TType.DOUBLE, 'score', None, None, ),  # 6
    (7, TType.STRING, 'service_name', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'global_context', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'corefer_context', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'baike_tag', None, False, ),  # 10
    (11, TType.MAP, 'latency', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 11
    (12, TType.BOOL, 'cache_tag', None, False, ),  # 12
)
all_structs.append(Exception)
Exception.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'err_num', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
